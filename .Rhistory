mesa.use <- mesa.raw[mesa.raw$ACTUAL_13!=0,]
mesa.other <- mesa.raw[mesa.raw$ACTUAL_13==0,]
split <- sample(x = c(TRUE, FALSE), size = nrow(mesa.use), prob = c(.4,.6), replace = TRUE)
mesa.train <-mesa.raw[split,]
mesa.val <- mesa.raw[(split!=TRUE),]
nrow(mesa.train) + nrow(mesa.val)
nrow(mesa.raw)
head(mesa.train)
#-------------------------------------------------------------------------------------------------------
k <- 5
n.trials <- 1
number.of.variables <- ncol(mesa.train)-1
set.seed(seed)
RMSE.out <- rep(NA, number.of.variables)
x.in <- mesa.train[,-20]
x.in <- model.matrix(~., x.in)
y.in <- mesa.train$ACTUAL_13
df.in <- cbind(x.in, y.in)
?model.matrix
val.x.in <-model.matrix(~., mesa.val[,-20])
#val.x.in <- mesa.val[,-20]
val.y.in <- mesa.val$ACTUAL_13
comparision <- c()
#-------------------------------------------------------------------------------------------------------
# ridge
ridge.vs.lasso <- 0
best.lamda <- c()
for(i in 1:n.trials){
cv.out <- cv.glmnet(x = as.matrix(x.in), y = y.in, alpha = ridge.vs.lasso, nfolds = k )
best.lamda[i] <- cv.out$lambda.min
}
mean(best.lamda)
var(best.lamda)
best.lamda.use <- mean(best.lamda)
model.fit <- glmnet(x = as.matrix(x.in), y = y.in, alpha = ridge.vs.lasso, lambda = best.lamda.use)
predicted.use <- predict.glmnet(object = model.fit, newx = val.x.in)
RMSE.out <- RMSE( actual = val.y.in, predicted = predicted.use)
comparision$Ridge <- RMSE.out
#-------------------------------------------------------------------------------------------------------
# lasso
ridge.vs.lasso <- 1
best.lamda <- c()
for(i in 1:n.trials){
cv.out <- cv.glmnet(x = as.matrix(x.in), y = y.in, alpha = ridge.vs.lasso, nfolds = k )
best.lamda[i] <- cv.out$lambda.min
}
mean(best.lamda)
var(best.lamda)
best.lamda.use <- mean(best.lamda)
model.fit <- glmnet(x = as.matrix(x.in), y = y.in, alpha = ridge.vs.lasso, lambda = best.lamda.use)
predicted.use <- predict.glmnet(object = model.fit, newx = val.x.in)
RMSE.out <- RMSE( actual = val.y.in, predicted = predicted.use)
comparision$RLasso <- RMSE.out
#-------------------------------------------------------------------------------------------------------
#FULL MODEL --> USE LASSO --> THIS OVER FITS.... need to do a bootstrap to do this statstically rigorously.... come back here....
#model.fit <- glmnet(x = model.matrix(~.,mesa.use[,-20]), y = mesa.use$ACTUAL_13 , alpha = 1, lambda = best.lamda.use)
#-------------------------------------------------------------------------------------------------------
#code the output...prediction
predict.use <- predict(model.fit, newx = model.matrix(~.,mesa.use[,-20]))
mesa.predict <- as.data.frame(cbind(mesa.use$PREMISES_CODE, mesa.use$ACTUAL_13, predict.use))
colnames(mesa.predict) <- c("PREMISES_CODE", "ACTUAL_13", "PRED_13")
mesa.predict <- as.data.frame(output.mesa.use)
#mean(sqrt((output.mesa.use$ACTUAL_13 - output.mesa.use$PRED_13)^2))
#-------------------------------------------------------------------------------------------------------
#OHTER
head(mesa.other)
#if 1 year ago a 0 +- 3 montsh --> fine
#if last month 0 --> fine
eval <- as.data.frame(cbind(mesa.other$ACTUAL_00==0,  mesa.other$ACTUAL_01==0, mesa.other$ACTUAL_02==0, mesa.other$ACTUAL_12 ==0))
eval.sum <- apply(eval, MARGIN = c(1), FUN = sum )
eval.key <- as.data.frame(
cbind(0:4, c("Very likely", "Likely", "Somewhat likely", "Unclear" ,"Unlikely"))
)
eval.key.apply <- factor(rep(NA,length(eval.sum)), levels= c("Very likely", "Likely", "Somewhat likely", "Unclear" ,"Unlikely"))
for(i in 1:length(eval.sum)){
eval.key.apply[i] <- eval.key[eval.sum[i]==eval.key[,1],2]
}
mesa.other$zero.class <- eval.key.apply
#-------------------------------------------------------------------------------------------------------
#write out the predictions for analysis
#DOPE
list.test <- list(mesa.other, mesa.raw, mesa.predict,comparision)
list.test
saveRDS( mesa.other, mesa.raw, mesa.predict,comparision, file = "predict_output_with_raw.RData")
save(mesa.other, mesa.raw, mesa.predict,comparision, file = "predict_output_with_raw.RData")
load("predict_output_with_raw.RData", verbose = TRUE)
load("predict_output_with_raw.RData", verbose = TRUE)
comparision
rev.multiplier <- .1*100
setwd("~/Dropbox/Wharton/z Other/1 Water start up/Mesa/Mesa")
output.nontheft<- as.data.frame(matrix(data = rep(NA,7), nrow =1, ncol =7))
colnames(output.nontheft) <- c("Meter_location", "Replacement_priority",  "Unexpected_variability", "Meter_age", "Likelihood_OT_payment",
"Est_lost_revenue")
#out.put.left  --> TO DO
load("predict_output_with_raw.RData", verbose = TRUE)
rev.multiplier <- .1*100
output.nontheft<- as.data.frame(matrix(data = rep(NA,6), nrow =1, ncol =7))
colnames(output.nontheft) <- c("Meter_location", "Replacement_priority",  "Unexpected_variability", "Meter_age", "Likelihood_OT_payment",
"Est_lost_revenue")
setwd("~/Dropbox/Wharton/z Other/1 Water start up/Mesa/Mesa")
output.nontheft<- as.data.frame(matrix(data = rep(NA,6), nrow =1, ncol =7))
colnames(output.nontheft) <- c("Meter_location", "Replacement_priority",  "Unexpected_variability", "Meter_age", "Likelihood_OT_payment",
"Est_lost_revenue")
#out.put.left  --> TO DO
load("predict_output_with_raw.RData", verbose = TRUE)
rev.multiplier <- .1*100
head(mesa.predict)
head(mesa.raw)
mesa.raw$PREMISES_CODE==mesa.predict$PREMISES_CODE
sum(mesa.raw$PREMISES_CODE==mesa.predict$PREMISES_CODE)
?subset
mesa.output <- mesa.raw
t <- c()
I <- 1
i <- 1
subset(mesa.output, mesa.output$PREMISES_CODE==mesa.predict$PREMISES_CODE[i])
mesa.output <- mesa.raw
t <- c()
mesa.output <- mesa.raw
mesa.predict.full <- c()
for(i in length(mesa.predict)){
mesa.predict.full <- subset(mesa.output, mesa.output$PREMISES_CODE==mesa.predict$PREMISES_CODE[i])
mesa.predict.full <- as.data.frame(cbind(mesa.predict.full,mesa.predict$PRED_13))
}
nrow(mesa.predict.full)
nrow(mesa.predict)
head(mesa.predict.full)
colnames(mesa.predict.full)[length(colnames(mesa.predict.full))]
colnames(mesa.predict.full)[length(colnames(mesa.predict.full))] <- "PRED_13"
mesa.predict
mesa.output <- mesa.raw
mesa.predict.full <- c()
for(i in length(mesa.predict)){
mesa.predict.full <- subset(mesa.output, mesa.output$PREMISES_CODE==mesa.predict$PREMISES_CODE[i])
mesa.predict.full <- as.data.frame(cbind(mesa.predict.full,mesa.predict$PRED_13))
}
head(meaa.predict)
head(mesa.predict)
head(mesa.predict.full)
i<-2
subset(mesa.output, mesa.output$PREMISES_CODE == mesa.predict$PREMISES_CODE[i])
mesa.output <- mesa.raw
mesa.predict.full <- c()
for(i in length(mesa.predict)){
mesa.predict.full <- subset(mesa.output, mesa.output$PREMISES_CODE == mesa.predict$PREMISES_CODE[i])
mesa.predict.full <- as.data.frame(rbind(mesa.predict.full,mesa.predict$PRED_13))
}
nrow(mesa.predict)
nrow(mesa.predict.full)
mesa.predict.full <- subset(mesa.output, mesa.output$PREMISES_CODE == mesa.predict$PREMISES_CODE[i])
mesa.predict.full
i<-2
mesa.predict.full <- subset(mesa.output, mesa.output$PREMISES_CODE == mesa.predict$PREMISES_CODE[i])
t <- subset(mesa.output, mesa.output$PREMISES_CODE == mesa.predict$PREMISES_CODE[i])
mesa.output <- mesa.raw
mesa.predict.full <- c()
for(i in length(mesa.predict)){
t <- subset(mesa.output, mesa.output$PREMISES_CODE == mesa.predict$PREMISES_CODE[i])
t <- as.data.frame(cbind(t, mesa.predict$PRED_13[i]))
mesa.predict.full <- as.data.frame(rbind(mesa.predict.full,t))
}
head(mesa.predict.full)
mesa.predict.full
i<-2
t <- subset(mesa.output, mesa.output$PREMISES_CODE == mesa.predict$PREMISES_CODE[i])
t
i<-1
mesa.output <- mesa.raw
mesa.predict.full <- c()
i<-1
t <- subset(mesa.output, mesa.output$PREMISES_CODE == mesa.predict$PREMISES_CODE[i])
t
t <- as.data.frame(cbind(t, mesa.predict$PRED_13[i]))
t
mesa.predict.full <- as.data.frame(rbind(mesa.predict.full,t))
mesa.predict.full
i<-2
t <- subset(mesa.output, mesa.output$PREMISES_CODE == mesa.predict$PREMISES_CODE[i])
t
t
t <- as.data.frame(cbind(t, mesa.predict$PRED_13[i]))
t
mesa.predict.full <- as.data.frame(rbind(mesa.predict.full,t))
mesa.predict.full
mesa.output <- mesa.raw
mesa.predict.full <- c()
for(i in length(mesa.predict)){
t <- subset(mesa.output, mesa.output$PREMISES_CODE == mesa.predict$PREMISES_CODE[i])
t <- as.data.frame(cbind(t, mesa.predict$PRED_13[i]))
mesa.predict.full <- as.data.frame(rbind(mesa.predict.full,t))
}
mesa.predict.full
mesa.output <- mesa.raw
mesa.predict.full <- c()
mesa.predict.full <- as.data.frame(
matrix(
rep(NA,ncol(mesa.output)+1),
ncol = ncol(mesa.output)+1)))
?matrix
?ncol
ncol(mesa.output)
rep(NA,ncol(mesa.output)+1),
rep(NA,ncol(mesa.output)+1)
mesa.output <- mesa.raw
mesa.predict.full <- as.data.frame(
matrix(
rep(NA,ncol(mesa.output)+1),
ncol = ncol(mesa.output)+1))
mesa.predict.full
colnames(mesa.predict.full) <- c(colnames(mesa.output), "PRED_13")
mesa.predict.full
for(i in length(mesa.predict)){
t <- subset(mesa.output, mesa.output$PREMISES_CODE == mesa.predict$PREMISES_CODE[i])
t <- as.data.frame(cbind(t, mesa.predict$PRED_13[i]))
mesa.predict.full[i,] <- t
}
mesa.predict.full
for(i in nrow(mesa.predict)){
t <- subset(mesa.output, mesa.output$PREMISES_CODE == mesa.predict$PREMISES_CODE[i])
t <- as.data.frame(cbind(t, mesa.predict$PRED_13[i]))
mesa.predict.full[i,] <- t
}
mesa.predict.full
mesa.output <- mesa.raw
mesa.predict.full <- c()
for(i in length(mesa.predict)){
t <- subset(mesa.output, mesa.output$PREMISES_CODE == mesa.predict$PREMISES_CODE[i])
t <- as.data.frame(cbind(t, mesa.predict$PRED_13[i]))
mesa.predict.full <- as.data.frame(rbind(mesa.predict.full,t))
}
mesa.output <- mesa.raw
mesa.predict.full <- c()
for(i in nrow(mesa.predict)){
t <- subset(mesa.output, mesa.output$PREMISES_CODE == mesa.predict$PREMISES_CODE[i])
t <- as.data.frame(cbind(t, mesa.predict$PRED_13[i]))
mesa.predict.full <- as.data.frame(rbind(mesa.predict.full,t))
}
mesa.predict.full
i<-1
nrow(mesa.predict)
i<-1
mesa.output <- mesa.raw
mesa.predict.full <- c()
i<-1
t <- subset(mesa.output, mesa.output$PREMISES_CODE == mesa.predict$PREMISES_CODE[i])
t <- as.data.frame(cbind(t, mesa.predict$PRED_13[i]))
mesa.predict.full <- as.data.frame(rbind(mesa.predict.full,t))
mesa.predict.full
i<-2
t <- subset(mesa.output, mesa.output$PREMISES_CODE == mesa.predict$PREMISES_CODE[i])
t <- as.data.frame(cbind(t, mesa.predict$PRED_13[i]))
mesa.predict.full <- as.data.frame(rbind(mesa.predict.full,t))
i<-3
t <- subset(mesa.output, mesa.output$PREMISES_CODE == mesa.predict$PREMISES_CODE[i])
t <- as.data.frame(cbind(t, mesa.predict$PRED_13[i]))
mesa.predict.full <- as.data.frame(rbind(mesa.predict.full,t))
mesa.predict.full
mesa.predict.full <- c()
for(i in 1:nrow(mesa.predict)){
t <- subset(mesa.output, mesa.output$PREMISES_CODE == mesa.predict$PREMISES_CODE[i])
t <- as.data.frame(cbind(t, mesa.predict$PRED_13[i]))
mesa.predict.full <- as.data.frame(rbind(mesa.predict.full,t))
}
mesa.output <- mesa.raw
mesa.predict.full <- c()
for(i in 1:nrow(mesa.predict)){
t <- subset(mesa.output, mesa.output$PREMISES_CODE == mesa.predict$PREMISES_CODE[i])
t <- as.data.frame(cbind(t, mesa.predict$PRED_13[i]))
mesa.predict.full <- as.data.frame(rbind(mesa.predict.full,t))
}
?apply
head(mesa.raw)
mesa.sd <- apply(mesa.raw[,8:20], MARGIN = c(1), sd)
mesa.sd
mesa.sd <- as.data.frame(cbind(mesa.raw$PREMISES_CODE, mesa.sd))
colnames(mesa.sd)
colnames(mesa.sd) <- c("PREMISES_CODE", "SD_00_12")
mesa.predict
head(mesa.predict)
for(i in 1:nrow(mesa.predict)){
mesa.predict$SD_00_12[i] <- mesa.sd[mesa.predict$PREMISES_CODE[i]==mesa.sd$PREMISES_CODE, 2]
}
warning()
head(mesa.predict)
mesa.predict$N_SD <- mesa.predict$DIFF / mesa.predict$SD_00_12
mesa.predict$DIFF <- mesa.predict$PRED_13 - mesa.predict$ACTUAL_13
mesa.predict$N_SD <- mesa.predict$DIFF / mesa.predict$SD_00_12
head(mesa.predict)
mesa.predict$N_RMSE <- mesa.predict$DIFF / comparision$RLasso
head(mesa.predict)
comparision$RLasso
sort(mesa.predict$N_RMSE, decreasing = TRUE)
sort(mesa.predict$N_sd, decreasing = TRUE)[10]
sort(mesa.predict$N_SD, decreasing = TRUE)[10]
sort(mesa.predict$N_SD, decreasing = TRUE)
mesa.predict[mesa.predict$SD==0,]
mesa.raw[mesa.raw$PREMISES_CODE==122299,]
mesa.raw[mesa.raw$PREMISES_CODE==183841,]
mesa.raw[mesa.raw$PREMISES_CODE==127035,]
mesa.raw[mesa.raw$PREMISES_CODE==161588,]
mesa.raw[mesa.raw$PREMISES_CODE==117142,]
sort(mesa.predict$N_RMSE, decreasing = TRUE)
mesa.predict$N_RMSE==96.512571
mesa.predict[mesa.predict$N_RMSE==96.512571,]
mesa.predict$N_RMSE==96.512571
sum(mesa.predict$N_RMSE==96.512571)
?round
sum(trunc(mesa.predict$N_RMSE,4)==96.512571)
sort(mesa.predict$N_RMSE, decreasing = TRUE)
mesa.predict
which.max(mesa.predict$N_RMSE)
mesa.predict[which.max(mesa.predict$N_RMSE),]
mesa.predict[which.max(mesa.predict$N_SD),]
mesa.predict$N_SD_adj <- mesa.predict$N_SD
mesa.predict$N_SD_adj <- mesa.predict$N_SD
mesa.predict$N_SD_adj[mesa.predict$N_SD_adj == Inf] <- NA
mesa.predict[which.max(mesa.predict$N_SD),]
mesa.predict[which.max(mesa.predict$N_SD_adj),]
mesa.predict$REV <- rev.multiplier * mesa.predict$DIFF
head(mesa.other)
mean(mesa.raw$ACTUAL_13)
stolen.water.mult <- mean(mesa.raw$ACTUAL_13)
?apply
apply(mesa.other[,8:20], sum)
apply(mesa.other[,8:20], MARGIN = 1, sum)
apply(mesa.other[,8:20], MARGIN = 1, sum)/((20-8)*stolen.water.mult))
mesa.other$REV <- rev.multiplier * stolen.water.mult * (1 - apply(mesa.other[,8:20], MARGIN = c(1), sum)/((20-8)*stolen.water.mult))
?apply
mesa.other$REV
sum(mesa.predict$REV)
sum(mesa.other$REV)
sum(mesa.predict$REV[mesa.predict$REV>0])
sum(mesa.other$REV[mesa.other$REV>0])
2548986 + 2973397
sort(mesa.predict$N_SD, decreasing = TRUE)
sort(mesa.predict$N_SD_adj, decreasing = TRUE)
eval.key <- as.data.frame(
cbind(c(3,2,1,.5,0), c("Very likely", "Likely", "Somewhat likely", "Unclear" ,"Unlikely"))
)
eval <- factor(rep(NA,nrow(mesa.predict)), levels= c("Very likely", "Likely", "Somewhat likely", "Unclear" ,"Unlikely"))
eval.key <- as.data.frame(
cbind(c(3,2,1,.5,0), c("Very likely", "Likely", "Somewhat likely", "Unclear" ,"Unlikely"))
)
eval <- factor(rep(NA,nrow(mesa.predict)), levels= c("Very likely", "Likely", "Somewhat likely", "Unclear" ,"Unlikely"))
for(i in 1:nrow(mesa.predict)){
if( mesa.predict$N_SD_adj >= eval.key[1,1]) {eval[i] <- eval.key[1,2]}
if( mesa.predict$N_SD_adj >= eval.key[2,1]) {eval[i] <- eval.key[2,2]}
if( mesa.predict$N_SD_adj >= eval.key[3,1]) {eval[i] <- eval.key[3,2]}
if( mesa.predict$N_SD_adj >= eval.key[4,1]) {eval[i] <- eval.key[4,2]
}else{eval[i] <- eval.key[5,2]}
}
eval.key <- as.data.frame(
cbind(c(3,2,1,.5,0), c("Very likely", "Likely", "Somewhat likely", "Unclear" ,"Unlikely"))
)
eval <- factor(rep(NA,nrow(mesa.predict)), levels= c("Very likely", "Likely", "Somewhat likely", "Unclear" ,"Unlikely"))
for(i in 1:nrow(mesa.predict)){
if( mesa.predict$N_SD_adj[i] >= eval.key[1,1]) {eval[i] <- eval.key[1,2]}
if( mesa.predict$N_SD_adj[i] >= eval.key[2,1]) {eval[i] <- eval.key[2,2]}
if( mesa.predict$N_SD_adj[i] >= eval.key[3,1]) {eval[i] <- eval.key[3,2]}
if( mesa.predict$N_SD_adj[i] >= eval.key[4,1]) {eval[i] <- eval.key[4,2]
}else{eval[i] <- eval.key[5,2]}
}
i <-1
mesa.predict$N_SD_adj[i]>=eval.key[1,1]
mesa.predict$N_SD_adj[i] => eval.key[1,1]
mesa.predict$N_SD_adj[i] > eval.key[1,1]
mesa.predict$N_SD_adj[i]
eval.key[1,1]
mesa.predict$N_SD_adj[i] > eval.key[1,1]
mesa.predict$N_SD_adj[i]>eval.key[1,1]
mesa.predict$N_SD_adj[i] >= eval.key[1,1]
eval.key[1,1]
eval.key[,2] <- as.number(eval.key[,2])
eval.key[,2] <- as.numeric(eval.key[,2])
mesa.predict$N_SD_adj[i] >= eval.key[1,1]
eval.key[1,1]
mesa.predict$N_SD_adj[i] >= as.numeric(eval.key[1,1])
eval.key <- as.data.frame(
cbind(c(3,2,1,.5,0), c("Very likely", "Likely", "Somewhat likely", "Unclear" ,"Unlikely"))
)
eval <- factor(rep(NA,nrow(mesa.predict)), levels= c("Very likely", "Likely", "Somewhat likely", "Unclear" ,"Unlikely"))
for(i in 1:nrow(mesa.predict)){
if( mesa.predict$N_SD_adj[i] >= as.numeric(eval.key[1,1]) ) {eval[i] <- eval.key[1,2]}
if( mesa.predict$N_SD_adj[i] >= as.numeric(eval.key[2,1]) ) {eval[i] <- eval.key[2,2]}
if( mesa.predict$N_SD_adj[i] >= as.numeric(eval.key[3,1]) ) {eval[i] <- eval.key[3,2]}
if( mesa.predict$N_SD_adj[i] >= as.numeric(eval.key[4,1]) ) {eval[i] <- eval.key[4,2]
}else{eval[i] <- eval.key[5,2]}
}
mesa.predict$N_SD_adj[i] >= as.numeric(eval.key[1,1])
is.na(mesa.predict$N_SD_adj[i])
eval.key <- as.data.frame(
cbind(c(3,2,1,.5,0), c("Very likely", "Likely", "Somewhat likely", "Unclear" ,"Unlikely"))
)
eval <- factor(rep(NA,nrow(mesa.predict)), levels= c("Very likely", "Likely", "Somewhat likely", "Unclear" ,"Unlikely"))
for(i in 1:nrow(mesa.predict)){
if(is.na(mesa.predict$N_SD_adj[i])) {eval[i] <- eval.key[5,2]}
if( mesa.predict$N_SD_adj[i] >= as.numeric(eval.key[1,1]) ) {eval[i] <- eval.key[1,2]}
if( mesa.predict$N_SD_adj[i] >= as.numeric(eval.key[2,1]) ) {eval[i] <- eval.key[2,2]}
if( mesa.predict$N_SD_adj[i] >= as.numeric(eval.key[3,1]) ) {eval[i] <- eval.key[3,2]}
if( mesa.predict$N_SD_adj[i] >= as.numeric(eval.key[4,1]) ) {eval[i] <- eval.key[4,2]
}else{eval[i] <- eval.key[5,2]}
}
is.na(mesa.predict$N_SD_adj[i])
###
eval.key <- as.data.frame(
cbind(c(3,2,1,.5,0), c("Very likely", "Likely", "Somewhat likely", "Unclear" ,"Unlikely"))
)
eval <- factor(rep(NA,nrow(mesa.predict)), levels= c("Very likely", "Likely", "Somewhat likely", "Unclear" ,"Unlikely"))
for(i in 1:nrow(mesa.predict)){
if(is.na(mesa.predict$N_SD_adj[i])){eval[i] <- eval.key[5,2]
}else if( mesa.predict$N_SD_adj[i] >= as.numeric(eval.key[1,1]) ) {eval[i] <- eval.key[1,2]
}else if( mesa.predict$N_SD_adj[i] >= as.numeric(eval.key[2,1]) ) {eval[i] <- eval.key[2,2]
}else if( mesa.predict$N_SD_adj[i] >= as.numeric(eval.key[3,1]) ) {eval[i] <- eval.key[3,2]
}else if( mesa.predict$N_SD_adj[i] >= as.numeric(eval.key[4,1]) ) {eval[i] <- eval.key[4,2]
}else{eval[i] <- eval.key[5,2]}
}
head(eval)
head(mesa.predict$N_SD_adj)
mesa.predict$classification <- eval
mesa.predict
table(mesa.predict$classification)
table(mesa.predict$REV)
mesa.predict$REV[mesa.predict$REV<0] <- 0
table(mesa.predict$REV)
mesa.other$REV[mesa.other$REV<0] <- 0
head(mesa.predict)
head(output.nontheft)
output.nontheft<- as.data.frame(matrix(data = rep(NA,6), nrow =1, ncol =7))
colnames(output.nontheft) <- c("Meter_location", "Replacement_priority",  "Unexpected_variability", "Meter_age", "Likelihood_OT_payment",
"Est_lost_revenue")
output.nontheft$Meter_location <- mesa.predict$PREMISES_CODE
output.nontheft$Replacement_priority <- mesa.predict$classification
output.nontheft$Unexpected_variability <- mesa.predict$DIFF
output.nontheft$Meter_age <- rep("TBD", nrow(mesa.preict))
output.nontheft$Likelihood_OT_payment <- rep("TBD", nrow(mesa.preict))
output.nontheft$Est_lost_revenue <- mesa.predict$REV
output.nontheft<- as.data.frame(matrix(data = rep(1,6), nrow =1, ncol =7))
colnames(output.nontheft) <- c("Meter_location", "Replacement_priority",  "Unexpected_variability", "Meter_age", "Likelihood_OT_payment",
"Est_lost_revenue")
output.nontheft
output.nontheft$Meter_location <- mesa.predict$PREMISES_CODE
output.nontheft<- as.data.frame(matrix(data = rep(NA,7*nrow(mesa.predict)), nrow = mesa.predict, ncol =7))
colnames(output.nontheft) <- c("Meter_location", "Replacement_priority",  "Unexpected_variability", "Meter_age", "Likelihood_OT_payment",
"Est_lost_revenue")
output.nontheft<- as.data.frame(matrix(data = rep(NA,(7*nrow(mesa.predict))), nrow = mesa.predict, ncol =7))
(7*nrow(mesa.predict)
)
rep(NA,(7*nrow(mesa.predict))
rep(NA,(7*nrow(mesa.predict)))
rep(NA,(7*nrow(mesa.predict)))
filler <- rep(NA,(7*nrow(mesa.predict)))
filler
output.nontheft<- as.data.frame(matrix(data = filler , nrow = mesa.predict, ncol =7))
output.nontheft <- c()
output.nontheft$Meter_location <- mesa.predict$PREMISES_CODE
output.nontheft$Replacement_priority <- mesa.predict$classification
output.nontheft$Unexpected_variability <- mesa.predict$DIFF
output.nontheft$Meter_age <- rep("TBD", nrow(mesa.preict))
output.nontheft$Likelihood_OT_payment <- rep("TBD", nrow(mesa.preict))
output.nontheft$Est_lost_revenue <- mesa.predict$REV
write.csv(output.nontheft, file = "output_broken_meter.csv")
mesa.other
head(mesa.other)
output.nontheft <- c()
output.nontheft$Meter_location <- mesa.predict$PREMISES_CODE
output.nontheft$Error_likelihood <- mesa.predict$classification
output.nontheft$Unexpected_variability <- mesa.predict$DIFF
output.nontheft$Meter_age <- rep("TBD", nrow(mesa.preict))
output.nontheft$Likelihood_OT_payment <- rep("TBD", nrow(mesa.preict))
output.nontheft$Est_lost_revenue <- mesa.predict$REV
write.csv(output.nontheft, file = "output_broken_meter.csv")
output.nontheft <- c()
output.nontheft$Meter_location <- mesa.predict$PREMISES_CODE
output.nontheft$Error_likelihood <- mesa.predict$classification
output.nontheft$Unexpected_variability <- mesa.predict$DIFF
output.nontheft$Meter_age <- rep("TBD", nrow(mesa.predict))
output.nontheft$Likelihood_OT_payment <- rep("TBD", nrow(mesa.predict))
output.nontheft$Est_lost_revenue <- mesa.predict$REV
write.csv(output.nontheft, file = "output_broken_meter.csv")
head(mesa.other)
output.theft$Meter_location <- mesa.other$PREMISES_CODE
output.theft$Error_likelihood <- mesa.other$zero.class
head(mesa.other)
output.theft <- c()
output.theft$Meter_location <- mesa.other$PREMISES_CODE
output.theft$Error_likelihood <- mesa.other$zero.class
output.theft$Meter_age <- rep("TBD", nrow(mesa.other))
output.theft$Likelihood_OT_payment <- rep("TBD", nrow(mesa.other))
output.nontheft$Est_lost_revenue <- mesa.other$REV
write.csv(output.nontheft, file = "output_theft.csv")
output.nontheft <- c()
output.nontheft$Meter_location <- mesa.predict$PREMISES_CODE
output.nontheft$Error_likelihood <- mesa.predict$classification
output.nontheft$Unexpected_variability <- mesa.predict$DIFF
output.nontheft$Meter_age <- rep("TBD", nrow(mesa.predict))
output.nontheft$Likelihood_OT_payment <- rep("TBD", nrow(mesa.predict))
output.nontheft$Est_lost_revenue <- mesa.predict$REV
write.csv(output.nontheft, file = "output_broken_meter.csv")
output.theft <- c()
output.theft$Meter_location <- mesa.other$PREMISES_CODE
output.theft$Error_likelihood <- mesa.other$zero.class
output.theft$Meter_age <- rep("TBD", nrow(mesa.other))
output.theft$Likelihood_OT_payment <- rep("TBD", nrow(mesa.other))
output.theft$Est_lost_revenue <- mesa.other$REV
write.csv(output.nontheft, file = "output_theft.csv")
output.theft <- c()
output.theft$Meter_location <- mesa.other$PREMISES_CODE
output.theft$Error_likelihood <- mesa.other$zero.class
output.theft$Meter_age <- rep("TBD", nrow(mesa.other))
output.theft$Likelihood_OT_payment <- rep("TBD", nrow(mesa.other))
output.theft$Est_lost_revenue <- mesa.other$REV
write.csv(output.theft, file = "output_theft.csv")
